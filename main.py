import os
import pandas as pd
import dis
import sys

from examples.fibbo import fibonacci_function
from examples.sum import sum_function
from examples.unused import unused_sum_function
from examples.insecure_apikey import insecure_apikey_function
from examples.factorial import factorial_function
from examples.recursive_factorial import recursive_factorial_function

from static_analyzers import check_for_unused_vars, get_all_constants, find_recursive_function_names, function_to_bytecode_table


#Creates the path "function_tables/X.csv", where X is the name of the disassembled function
tables = {}
os.makedirs("function_tables", exist_ok=True)

#Disassemble each function, turn it into a csv and add it the the folder "function_tables"
for function in [
    fibonacci_function, sum_function, unused_sum_function,
    insecure_apikey_function, factorial_function, recursive_factorial_function
]:
  table = function_to_bytecode_table(function)
  table.to_csv(os.path.join("function_tables", function.__name__ + ".csv"))
  tables[function.__name__] = table

#This will print ['unused, 'unused2', 'unused3']
#print(check_for_unused_vars(tables["unused_sum_function"]))

#This will print -1
#print(check_for_unused_vars(tables["sum_function"]))

#print(get_all_constants(tables["insecure_apikey_function"]))

#print(find_recursive_function_names(tables["fibonacci_function"], "fibbonacci_function"))

#print(find_recursive_function_names(tables["factorial_function"], "factorial_function"))

#print(find_recursive_function_names(tables["recursive_factorial_function"], "recursive_factorial_function"))

def print_stack(table):
  """
  Prints the stack of a specified disassembled function
  """
  
  file = "function_tables\\"+ table + ".csv"
  df = pd.read_csv(file)
  pd.options.display.max_columns = len(df.columns)
  print(df)

if __name__ == '__main__':

  #If -U is input as a parameter, run check_for_unused_vars()
  if(sys.argv[1] == "-U"):
    print("\nChecking for any unused variables on the following stack...\n")
    print_stack(sys.argv[2])

    result = check_for_unused_vars(tables[sys.argv[2]])
    if(result == -1):
      print("Could not find any unused variables!")
    else:
      print("{}".format("-" * 75))
      print("Unused variable(s) found:")
      print(result)
      print("\n")


  #If -C is input as a parameter, run get_all_constants()
  elif(sys.argv[1] == "-C"):
    print("Gathering constants on the following stack... \n")
    print_stack(sys.argv[2])

    print("{}".format("-" * 75))
    print("Constants found:")
    print(get_all_constants(tables[sys.argv[2]]))
    print("\n")

  #If -R is input as a parameter, run find_recursive_function_names()
  elif(sys.argv[1] == "-R"):
    print("Checking for recursive functions on the following stack...")
    print_stack(sys.argv[2])

    print("{}".format("-" * 75))
    result = find_recursive_function_names(tables[sys.argv[2]], sys.argv[2])

    if(result == -1):
      print("Could not find any recursive functions!")
    else:
      print("Recursion detected! Name of recursive function(s) follows:")
      print(result)
      print("\n")
